name: Python Application CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: 200582.azurecr.io
  BACKEND_IMAGE_NAME: 200582.azurecr.io/farmnote-backend:latest
  FRONTEND_IMAGE_NAME: 200582.azurecr.io/farmnote-frontend:latest

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v4

      # Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest
          if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi

      # # Lint code using pylint
      # - name: Lint with pylint
      #   run: |
      #     pylint backend --fail-under 7

      # Run tests using pytest
      - name: Test with pytest
        run: |
          pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - uses: actions/checkout@v4

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log into Azure Container Registry
      - name: Log into Azure Container Registry
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_USERNAME }}
          password: ${{ secrets.AZURE_PASSWORD }}

      # Build and push Docker image for backend
      - name: Build and push Docker image for backend
        uses: docker/build-push-action@v5
        with:
          context: backend
          tags: ${{ env.BACKEND_IMAGE_NAME }}
          push: ${{ github.event_name == 'push' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push Docker image for frontend (if applicable)
      - name: Build and push Docker image for frontend
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: frontend
          tags: ${{ env.FRONTEND_IMAGE_NAME }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
